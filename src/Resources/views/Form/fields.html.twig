{% block slug_text_widget %}
    {{ block("form_widget") }}

    <div>
        {% if blank_title %}
            <input type="checkbox" id="blank_{{ id }}">
            <label for="blank_{{ id }}" style="display:inline;">{{ blank_title | trans }}</label>
        {% endif %}
        <span id="usesource_span_{{ id }}">
            <input type="checkbox" id="usesource_{{ id }}" {{ is_new  ? 'checked':'' }}>
            <label for="usesource_{{ id }}" style="display:inline;">
                {{ usesource_title ? usesource_title | trans  : "Use field" | trans ~ ' "' ~ source_field_title | trans ~ '"' }}
            </label>
        </span>
        <script>
            $(function() {
                var sourceInput = $('#{{ source_field_id }}'),
                        slugInput = $('#{{ id }}'),
                        useSourceInput = $('#usesource_{{ id }}'),
                        useBlankInput = $('#blank_{{ id }}');

                if (toTranslit(sourceInput.val(), 50) == slugInput.val()) {
                    //useSourceInput.prop('checked', true);
                    useSourceInput.iCheck('check');
                    useBlankInput.iCheck('uncheck');
                    sourceInput.on('keyup', onSourceChanged);
                } else if (sourceInput.val() != '' && slugInput.val() == '') {
                    useSourceInput.iCheck('uncheck');
                    slugInput.attr('disabled', 'disabled');
                    useSourceInput.iCheck('disable');
                    useBlankInput.iCheck('check');
                } else {
                    useSourceInput.iCheck('uncheck');
                    useBlankInput.iCheck('uncheck');
                }

                useSourceInput.on('ifChanged', usesourceToggle);
                useBlankInput.on('ifChanged', useBlankToggle);
                sourceInput.on('keyup', onSourceChanged);
                slugInput.on('keyup', slugOnKeyUp);

                function usesourceToggle() {
                    if (useSourceInput.is(':checked')) {
                        onSourceChanged();
                        sourceInput.on('keyup', onSourceChanged);
                        useBlankInput.iCheck('uncheck');
                    } else {
                        sourceInput.off('keyup', onSourceChanged);
                    }
                }

                function useBlankToggle() {
                    if (useBlankInput.is(':checked')) {
                        slugInput.attr('disabled', 'disabled');
                        useSourceInput.iCheck('uncheck');
                        useSourceInput.iCheck('disable');
                    } else {
                        slugInput.removeAttr('disabled');
                        useSourceInput.iCheck('enable');
                    }
                }

                function slugOnKeyUp() {
                    useSourceInput.iCheck('uncheck');
                    sourceInput.off('keyup', onSourceChanged);
                }

                function onSourceChanged() {
                    slugInput.val(toTranslit(sourceInput.val(), 50));
                }

                function toTranslit(text, limit) {
                    return text.replace(
                            /([а-яё])|([\s_-])|([^a-z\d])/gi,
                            function (all, ch, space, words, i) {
                                if (space || words) {
                                    return space ? '-' : '';
                                }
                                var code = ch.charCodeAt(0),
                                        index = code == 1025 || code == 1105 ? 0 :
                                                code > 1071 ? code - 1071 : code - 1039,
                                        t = ['yo', 'a', 'b', 'v', 'g', 'd', 'e', 'zh',
                                            'z', 'i', 'y', 'k', 'l', 'm', 'n', 'o', 'p',
                                            'r', 's', 't', 'u', 'f', 'h', 'c', 'ch', 'sh',
                                            'shch', '', 'y', '', 'e', 'yu', 'ya'
                                        ];
                                return t[index];
                            }
                    ).toLowerCase().substring(0, limit);
                }
            });
        </script>
    </div>
{% endblock slug_text_widget %}


{% block iphp_display_widget %}
    <div {{ block('container_attributes') }}>
        <p {{ block('widget_attributes') }}>

            {% if value_type == 'media' %}
            {{  media_helper.thumbnail (value, media_format) | raw  }}
            {%  else  %}
            {{ value|escape }}

            {% endif %}

            </p>
    </div>
{% endblock  iphp_display_widget %}